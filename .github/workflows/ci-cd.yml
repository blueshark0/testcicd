name: CI/CD Pipeline (Optimized)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # 设置统一的 pnpm 版本
  PNPM_VERSION: '9'

jobs:
  # 代码质量检查和构建
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Verify lockfile exists
        run: |
          if [ ! -f pnpm-lock.yaml ]; then
            echo "❌ pnpm-lock.yaml not found!"
            exit 1
          fi
          echo "✅ pnpm-lock.yaml found"

      - name: Install dependencies
        run: |
          echo "Installing dependencies with pnpm version:"
          pnpm --version
          
          # 尝试使用 frozen-lockfile，如果失败则使用普通安装
          if ! pnpm install --frozen-lockfile; then
            echo "⚠️ Frozen lockfile install failed, trying regular install..."
            pnpm install
          fi

      - name: Verify installation
        run: |
          echo "Checking installed packages..."
          pnpm list --depth=0

      - name: Type check
        run: pnpm run type-check

      - name: Build for production
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.node-version }}
          path: dist/
          retention-days: 7

  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          # 尝试使用 frozen-lockfile，如果失败则使用普通安装
          if ! pnpm install --frozen-lockfile; then
            echo "⚠️ Frozen lockfile install failed, trying regular install..."
            pnpm install
          fi

        # 如果有 ESLint 配置，可以启用这个步骤
        # - name: Run ESLint
        #   run: pnpm run lint

    # 如果有测试，可以启用这个步骤
    # - name: Run tests
    #   run: pnpm run test

  # 部署到 GitHub Pages
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          # 尝试使用 frozen-lockfile，如果失败则使用普通安装
          if ! pnpm install --frozen-lockfile; then
            echo "⚠️ Frozen lockfile install failed, trying regular install..."
            pnpm install
          fi

      - name: Build for production
        run: pnpm run build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
